FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:411 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0x8004217f38 0x8004214011 0x80042135c5 0x800421fe57 0x800421eea9 0x800422191f 0x80042216a5 0x800422135e 0x8004221217 0x800421cc9d 0x8004208fd7 0x80042093f5 0x4002f9 0x400e51 0x400e9a
Translation of call stack:
0x0000008004217f38: debug_panic (lib/kernel/debug.c:32)
0x0000008004214011: select_sector (devices/disk.c:412)
0x00000080042135c5: disk_read (devices/disk.c:220)
0x000000800421fe57: inode_read_at (filesys/inode.c:205)
0x000000800421eea9: file_read_at (filesys/file.c:87)
0x000000800422191f: file_backed_initializer (vm/file.c:43)
0x00000080042216a5: uninit_initialize (vm/uninit.c:56)
0x000000800422135e: vm_do_claim_page (vm/vm.c:284)
0x0000008004221217: vm_try_handle_fault (vm/vm.c:230)
0x000000800421cc9d: page_fault (userprog/exception.c:148)
0x0000008004208fd7: intr_handler (threads/interrupt.c:352)
0x00000080042093f5: intr_entry (threads/intr-stubs.o:?)
0x00000000004002f9: (unknown)
0x0000000000400e51: (unknown)
0x0000000000400e9a: (unknown)

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
